package com.example.AIrobot.Handler.Customer;

import com.example.AIrobot.Service.CustomerService;
import com.example.AIrobot.Service.OpenAiService;
import com.example.AIrobot.Service.SessionService;
import com.example.AIrobot.Util.LineMessageUtil;
import com.example.AIrobot.Entity.Customer;
import com.example.AIrobot.model.UserSession;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

@Component
public class CustomerHandler {

    private final CustomerService customerService;
    private final OpenAiService openAiService;
    private final SessionService sessionService;
    private final LineMessageUtil lineMessageUtil;
    

    public CustomerHandler(CustomerService customerService, OpenAiService openAiService, SessionService sessionService , LineMessageUtil lineMessageUtil) {
        this.customerService = customerService;
        this.openAiService = openAiService;
        this.sessionService = sessionService;
        this.lineMessageUtil = lineMessageUtil;
    }

    public ResponseEntity<String> handleSession(String userId, String userMessage, String replyToken) {
        if (!sessionService.hasUserSession(userId)) {
            return null; // ‰∏çÂ±¨ÊñºÊú¨ÊµÅÁ®ã
        }
        UserSession session = sessionService.getUserSession(userId);
        String replyText = "";

        if (userMessage.trim().equals("@ÂèñÊ∂à")) {
            sessionService.removeUserSession(userId);
            someMethod(replyToken, "‚úÖ Â∑≤ÂèñÊ∂àÊìç‰ΩúÔºåÂõûÂà∞‰∏ªÈÅ∏ÂñÆ„ÄÇ");
            return ResponseEntity.ok("OK");
        }

        switch (session.step) {
            // --------- Êõ¥Êñ∞ÊµÅÁ®ã ---------
            case CHOOSE_SAME_NAME_INDEX -> {
                replyText = handleChooseSameNameIndex(session, userMessage);
                sessionService.setUserSession(userId, session);
                 someMethod(replyToken, replyText);
                return ResponseEntity.ok("OK");
            }
            case DELETE_CHOOSE_INDEX -> {
                replyText = handleDeleteChooseIndex(session, userMessage);
                sessionService.setUserSession(userId, session);
                someMethod(replyToken, replyText);
                return ResponseEntity.ok("OK");
            }
            case DELETE_CONFIRM -> {
                replyText = handleDeleteConfirm(session, userMessage, userId);
                sessionService.removeUserSession(userId);
                 someMethod(replyToken, replyText);
                return ResponseEntity.ok("OK");
            }
            case UPDATE_CHOOSE_FIELD -> {
                replyText = handleUpdateChooseField(session, userMessage);
                sessionService.setUserSession(userId, session);
                 someMethod(replyToken, replyText);
                return ResponseEntity.ok("OK");
            }
            case UPDATE_ASK_UPDATE_VALUE -> {
                replyText = handleUpdateAskUpdateValue(session, userMessage, userId);
                sessionService.removeUserSession(userId);
                 someMethod(replyToken, replyText);
                return ResponseEntity.ok("OK");
            }
            // --------- Êñ∞Â¢ûÊµÅÁ®ã ---------
            
                case ASK_NAME -> {
                    session.name = userMessage.trim();
                    session.step = UserSession.Step.ASK_IDNUMBER;   // ‰∏ãÂÄãÊ≠•È©ü
                    sessionService.setUserSession(userId, session);
                    replyText = "üÜî Ë´ãËº∏ÂÖ•Ë∫´ÂàÜË≠âÂ≠óËôüÔºö\n(ÊàñËº∏ÂÖ•\"@Áï•ÈÅé\"Êàñ\"@ÂèñÊ∂à\")";
                }
                case ASK_IDNUMBER -> {
                    String input = userMessage.trim();
                    if (input.equals("@Áï•ÈÅé")) {
                        session.idNumber = null;
                        session.step = UserSession.Step.ASK_BIRTHDAY;
                        sessionService.setUserSession(userId, session);
                        replyText = "üéÇ Ë´ãËº∏ÂÖ•Âá∫ÁîüÂπ¥ÊúàÊó•Ôºà‰æãÂ¶ÇÔºö1990-01-01ÔºâÔºö";
                    } else if (!input.matches("^[A-Z][0-9]{9}$")) {
                        // Ê†ºÂºè‰∏çÂ∞çÔºåÈáç‰æÜ
                        replyText = "‚ùå Ë∫´ÂàÜË≠âÂ≠óËôüÊ†ºÂºèÈåØË™§ÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•Ôºà‰æãÂ¶ÇÔºöA123456789Ôºâ„ÄÇËã•ÁÑ°Ê≥ïÊèê‰æõÔºåË´ãËº∏ÂÖ• @Áï•ÈÅé";
                    } else {
                        // Ê†ºÂºèÊ≠£Á¢∫
                        session.idNumber = input;
                        session.step = UserSession.Step.ASK_BIRTHDAY;
                        sessionService.setUserSession(userId, session);
                        replyText = "üéÇ Ë´ãËº∏ÂÖ•Âá∫ÁîüÂπ¥ÊúàÊó•Ôºà‰æãÂ¶ÇÔºö1990-01-01ÔºâÔºö";
                    }
                    someMethod(replyToken, replyText);
                    return ResponseEntity.ok("OK");
}
                case ASK_BIRTHDAY -> {
                    if (userMessage.trim().equals("@Áï•ÈÅé")) {
                        session.birthday = null;
                    } else {
                        try {
                            session.birthday = LocalDate.parse(userMessage.trim());
                        } catch (Exception e) {
                            replyText = "‚ö†Ô∏è Êó•ÊúüÊ†ºÂºèÈåØË™§ÔºåË´ãÁî® yyyy-MM-ddÔºå‰æãÂ¶ÇÔºö1990-01-01";
                            someMethod(replyToken, replyText);
                            return ResponseEntity.ok("OK");
                        }
                    }
                    session.step = UserSession.Step.ASK_PHONE;
                    sessionService.setUserSession(userId, session);
                    replyText = "üìû Ë´ãËº∏ÂÖ•ÈõªË©±Ôºö\n(ÊàñËº∏ÂÖ•\"@ÂèñÊ∂à\")";
                }
                case ASK_PHONE -> {
                    session.phone = userMessage.trim();
                    session.step = UserSession.Step.ASK_REGION;
                    sessionService.setUserSession(userId, session);
                    replyText = "üìç Ë´ãËº∏ÂÖ•Âú∞ÂçÄÔºö\n(ÊàñËº∏ÂÖ•\"@ÂèñÊ∂à\")";
                }
                // ... ÂæåÁ∫åÁÖßÂéüÊú¨ÈÇèËºØÁπºÁ∫å
                case ASK_REGION -> {
                    session.region = userMessage.trim();
                    session.step = UserSession.Step.ASK_AGE;
                    sessionService.setUserSession(userId, session);
                    replyText = "üéÇ Ë´ãËº∏ÂÖ•Âπ¥ÈΩ°ÂèØÊâì\"@Áï•ÈÅé\"\n(ÊàñËº∏ÂÖ•\"@ÂèñÊ∂à\")";
                }
                case ASK_AGE -> {
                    if (userMessage.trim().equals("@Áï•ÈÅé")) session.age = null;
                    else {
                        try { session.age = Integer.parseInt(userMessage.trim()); }
                        catch(Exception e) { session.age = null; }
                    }
                    session.step = UserSession.Step.ASK_JOB;
                    sessionService.setUserSession(userId, session);
                    replyText = "üíº Ë´ãËº∏ÂÖ•ËÅ∑Ê•≠ÂèØÊâì \"@Áï•ÈÅé\"\n(ÊàñËº∏ÂÖ•\"@ÂèñÊ∂à\")Ôºö";
                }
                case ASK_JOB -> {
                    session.job = userMessage.trim().equals("@Áï•ÈÅé") ? null : userMessage.trim();
                    session.step = UserSession.Step.ASK_PRODUCTS;
                    sessionService.setUserSession(userId, session);
                    replyText = "üõ°Ô∏è Ë´ãËº∏ÂÖ•Â∑≤Ë≥ºÈö™Á®ÆÔºàÂ§öÂÄãÁî®ÈÄóËôüÂàÜÈöîÔºåÊ≤íÂ°´ÂèØÊâì @Áï•ÈÅéÔºâÔºö";
                }
                case ASK_PRODUCTS -> {
                    session.productsOwned = userMessage.trim().equals("@Áï•ÈÅé") ? null : userMessage.trim();
                    session.step = UserSession.Step.ASK_STATUS;
                    sessionService.setUserSession(userId, session);
                    replyText = "üìù Ë´ãËº∏ÂÖ•ÂÆ¢Êà∂ÁõÆÂâçÁãÄÊÖãÊàñÈúÄÊ±ÇÔºö";
                }
                case ASK_STATUS -> {
                    session.status = userMessage.trim();
                    session.step = UserSession.Step.CONFIRM;
                    sessionService.setUserSession(userId, session);
                    replyText = "‚úÖ Ë´ãÁ¢∫Ë™çË≥áÊñôÔºö\n"
                            + "ÂßìÂêçÔºö" + session.name + "\n"
                            + "Ë∫´ÂàÜË≠âÂ≠óËôüÔºö" + (session.idNumber == null ? "Êú™Â°´" : session.idNumber) + "\n"
                            + "Âá∫ÁîüÂπ¥ÊúàÊó•Ôºö" + (session.birthday == null ? "Êú™Â°´" : session.birthday) + "\n"
                            + "ÈõªË©±Ôºö" + session.phone + "\n"
                            + "Âú∞ÂçÄÔºö" + session.region + "\n"
                            + "Âπ¥ÈΩ°Ôºö" + (session.age == null ? "Êú™Â°´" : session.age) + "\n"
                            + "ËÅ∑Ê•≠Ôºö" + (session.job == null ? "Êú™Â°´" : session.job) + "\n"
                            + "Â∑≤Ë≥ºÈö™Á®ÆÔºö" + (session.productsOwned == null ? "Êú™Â°´" : session.productsOwned) + "\n"
                            + "ÁãÄÊÖãÔºö" + session.status + "\n"
                            + "Â¶ÇÊ≠£Á¢∫Ë´ãËº∏ÂÖ•\"Á¢∫Ë™ç\"ÔºåÂ¶ÇÈúÄÂèñÊ∂àË´ãËº∏ÂÖ•\"@ÂèñÊ∂à\"";
                }
                case CONFIRM -> {
                    if (userMessage.trim().equals("Á¢∫Ë™ç")) {
                        replyText = handleAddConfirm(session, userId);
                    } else {
                        replyText = "Â∑≤ÂèñÊ∂àÊñ∞Â¢û„ÄÇ";
                    }
                    sessionService.removeUserSession(userId);
                    someMethod(replyToken, replyText);
                    return ResponseEntity.ok("OK");
                }
                default -> {}
            }

         someMethod(replyToken, replyText);
        return ResponseEntity.ok("OK");
    }

    // ---- ÊãÜÂá∫ÂêÑÊµÅÁ®ãmethod ----
    //Â∑≤Êñ∞Â¢ûËá≥flow
    private String handleChooseSameNameIndex(UserSession session, String userMessage) {
        try {
            int idx = Integer.parseInt(userMessage.trim());
            if (idx >= 1 && idx <= session.sameNameList.size()) {
                Customer selected = session.sameNameList.get(idx - 1);
                session.selectedCustomerId = selected.getId();
                session.step = UserSession.Step.UPDATE_CHOOSE_FIELD;
                return "Ë´ãÂïèË¶ÅÊõ¥Êñ∞Âì™ÂÄãË≥áÊñôÔºüË´ãËº∏ÂÖ•Êï∏Â≠óÔºö\n1. ÂßìÂêç\n2. Ë∫´ÂàÜË≠âÂ≠óËôü\n3. Âá∫ÁîüÂπ¥ÊúàÊó•\n4. ÈõªË©±\n5. Âú∞ÂçÄ\n6. Âπ¥ÈΩ°\n7. ËÅ∑Ê•≠\n8. Â∑≤Ë≥ºÈö™Á®Æ\n9. ÁãÄÊÖã\n(Èö®ÊôÇËº∏ÂÖ• @ÂèñÊ∂à ÂèØ‰∏≠Ê≠¢)";
            } else {
                return "Ë´ãËº∏ÂÖ• 1~" + session.sameNameList.size() + " ‰πãÈñìÁöÑÊï∏Â≠ó„ÄÇ";
            }
        } catch (Exception e) {
            return "Ë´ãËº∏ÂÖ•Â∫èËôüÊï∏Â≠óÔºÅ";
        }
    }
    //Â∑≤Êñ∞Â¢ûËá≥flow
    private String handleDeleteChooseIndex(UserSession session, String userMessage) {
        try {
            int idx = Integer.parseInt(userMessage.trim());
            if (idx >= 1 && idx <= session.sameNameList.size()) {
                Customer target = session.sameNameList.get(idx - 1);
                session.selectedCustomerId = target.getId();
                session.step = UserSession.Step.DELETE_CONFIRM;
                return "Ë´ãÂïè‰Ω†Á¢∫Ë™çË¶ÅÂà™Èô§Ôºö\n"
                        + "ÂßìÂêçÔºö" + target.getName() + "\n"
                        + "ÈõªË©±Ôºö" + (target.getPhone() == null ? "ÁÑ°" : target.getPhone()) + "\n"
                        + "Â¶ÇË¶ÅÂà™Èô§Ë´ãËº∏ÂÖ•„ÄåÁ¢∫Ë™ç„ÄçÔºåÂèñÊ∂àË´ãËº∏ÂÖ• @ÂèñÊ∂à";
            } else {
                return "Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÁ∑®ËôüÔºÅ";
            }
        } catch (Exception e) {
            return "Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÁ∑®ËôüÔºÅ";
        }
    }
    //Â∑≤Êñ∞Â¢ûËá≥flow
    private String handleDeleteConfirm(UserSession session, String userMessage, String userId) {
        String replyText;
        if (userMessage.trim().equals("Á¢∫Ë™ç")) {
            boolean deleted = customerService.deleteCustomerById(session.selectedCustomerId, userId);
            if (deleted) {
                replyText = "‚úÖ Â∑≤Âà™Èô§ÊàêÂäü";
            } else {
                replyText = "‚ùå Âà™Èô§Â§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ";
            }
        } else {
            replyText = "Â∑≤ÂèñÊ∂àÂà™Èô§";
        }
        return replyText;
    }
    //Â∑≤Êñ∞Â¢ûËá≥flow
    private String handleUpdateChooseField(UserSession session, String userMessage) {
        try {
            int field = Integer.parseInt(userMessage.trim());
            if (field >= 1 && field <= 9) {
                session.updateFieldIndex = field;
                session.step = UserSession.Step.UPDATE_ASK_UPDATE_VALUE;
                String fieldName = switch (field) {
                    case 1 -> "ÂßìÂêç";
                    case 2 -> "Ë∫´ÂàÜË≠âÂ≠óËôü";
                    case 3 -> "Âá∫ÁîüÂπ¥ÊúàÊó•";
                    case 4 -> "ÈõªË©±";
                    case 5 -> "Âú∞ÂçÄ";
                    case 6 -> "Âπ¥ÈΩ°";
                    case 7 -> "ËÅ∑Ê•≠";
                    case 8 -> "Â∑≤Ë≥ºÈö™Á®Æ";
                    case 9 -> "ÁãÄÊÖã";
                    default -> "";
                };
                return "Ë´ãËº∏ÂÖ•Êñ∞ÁöÑ " + fieldName + "Ôºö";
            } else {
                return "Ë´ãËº∏ÂÖ• 1~9 ‰πãÈñìÁöÑÊï∏Â≠ó„ÄÇ";
            }
        } catch (Exception e) {
            return "Ë´ãËº∏ÂÖ•Êï∏Â≠óÔºà1~9ÔºâÔºÅ";
        }
    }
    //Â∑≤Êñ∞Â¢ûËá≥flow
    private String handleUpdateAskUpdateValue(UserSession session, String userMessage, String userId) {
            String value = userMessage.trim();
            int idx = session.updateFieldIndex;
            Customer customer = customerService.findById(session.selectedCustomerId);
            boolean updated = false;
            String fieldName = "";
            if (customer != null) {
                switch (idx) {
                    case 1 -> { customer.setName(value); fieldName = "ÂßìÂêç"; updated = true; }
                    case 2 -> { customer.setIdNumber(value); fieldName = "Ë∫´ÂàÜË≠âÂ≠óËôü"; updated = true; }
                    case 3 -> {
                        try {
                            // ÁîüÊó•Ê†ºÂºèÈ©óË≠âÔºåÂª∫Ë≠∞ yyyy-MM-dd
                            customer.setBirthday(java.time.LocalDate.parse(value));
                            fieldName = "(Ë•øÂÖÉ)Âá∫ÁîüÂπ¥ÊúàÊó•";
                            updated = true;
                        } catch (Exception e) {
                            return "‚ö†Ô∏è ÁîüÊó•Ê†ºÂºèÈåØË™§ÔºåË´ãÁî® yyyy-MM-ddÔºå‰æãÂ¶ÇÔºö1990-01-01";
                        }
                    }
                    case 4 -> { customer.setPhone(value); fieldName = "ÈõªË©±"; updated = true; }
                    case 5 -> { customer.setRegion(value); fieldName = "Âú∞ÂçÄ"; updated = true; }
                    case 6 -> {
                        try { customer.setAge(Integer.parseInt(value)); }
                        catch(Exception e) { customer.setAge(null); }
                        fieldName = "Âπ¥ÈΩ°"; updated = true;
                    }
                    case 7 -> { customer.setJob(value); fieldName = "ËÅ∑Ê•≠"; updated = true; }
                    case 8 -> { customer.setProductsOwned(value); fieldName = "Â∑≤Ë≥ºÈö™Á®Æ"; updated = true; }
                    case 9 -> { customer.setStatus(value); fieldName = "ÁãÄÊÖã"; updated = true; }
                }
                if (updated) {
                    try {
                        String resultJson = openAiService.analyzeCustomerPotential(customer);
                        JSONObject result = new JSONObject(resultJson);
                        customer.setPotentialLevel(result.optString("Êàê‰∫§Ê©üÊúÉ", "Êú™Áü•"));
                        customer.setAiComment(result.optString("Ë©ïÂÉπ", "ÁÑ°"));
                        customer.setAiProductAdvice(result.optString("Âª∫Ë≠∞Áî¢ÂìÅ","ÁÑ°"));
                        customer.setAiFollowUp(result.optString("ÂæåÁ∫åÂª∫Ë≠∞","ÁÑ°"));
                        customer.setAiTags(result.optString("Ê®ôÁ±§","ÁÑ°"));
                        customerService.addCustomer(customer);
                    } catch (Exception e) {
                        customer.setPotentialLevel("Êú™Áü•");
                        customer.setAiComment("AI ÂàÜÊûêÂ§±Êïó");
                        customer.setAiProductAdvice("Ê≤íÊúâÂª∫Ë≠∞");
                        customer.setAiFollowUp("Ê≤íÊúâÂª∫Ë≠∞");
                        customer.setAiTags("Ê≤íÊúâÊ®ôÁ±§");
                        customerService.addCustomer(customer);
                    }
                }
                String updateTime = customer.getUpdatedAt() != null
                        ? customer.getUpdatedAt().toLocalDate().toString() : "ÁÑ°";
                return "‚úÖ È°ßÂÆ¢Â∑≤Êõ¥Êñ∞Ôºö\n"
                        + "üë§ ÂßìÂêçÔºö" + customer.getName() + "\n"
                        + "üÜî Ë∫´ÂàÜË≠âÂ≠óËôüÔºö" + (customer.getIdNumber() == null ? "Êú™Â°´" : customer.getIdNumber()) + "\n"
                        + "üéÇ Âá∫ÁîüÂπ¥ÊúàÊó•Ôºö" + (customer.getBirthday() == null ? "Êú™Â°´" : customer.getBirthday().toString()) + "\n"
                        + "üìû ÈõªË©±Ôºö" + customer.getPhone() + "\n"
                        + "üìç Âú∞ÂçÄÔºö" + customer.getRegion() + "\n"
                        + "üéÇ Âπ¥ÈΩ°Ôºö" + (customer.getAge() == null ? "Êú™Â°´" : customer.getAge()) + "\n"
                        + "üíº ËÅ∑Ê•≠Ôºö" + (customer.getJob() == null ? "Êú™Â°´" : customer.getJob()) + "\n"
                        + "üõ°Ô∏è Â∑≤Ë≥ºÈö™Á®ÆÔºö" + (customer.getProductsOwned() == null ? "Êú™Â°´" : customer.getProductsOwned()) + "\n"
                        + "üìù ÁãÄÊÖãÔºö" + customer.getStatus() + "\n"
                        + "üî• Êàê‰∫§Ê©üÊúÉÔºö" + (customer.getPotentialLevel() != null ? customer.getPotentialLevel() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                        + "ü§ñ Ë©ïÂÉπÔºö" + (customer.getAiComment() != null ? customer.getAiComment() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                        + "üõí Âª∫Ë≠∞Áî¢ÂìÅÔºö" + (customer.getAiProductAdvice() != null ? customer.getAiProductAdvice() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                        + "üìå ÂæåÁ∫åÂª∫Ë≠∞Ôºö" + (customer.getAiFollowUp() != null ? customer.getAiFollowUp() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                        + "üè∑Ô∏è Ê®ôÁ±§Ôºö" + (customer.getAiTags() != null ? customer.getAiTags() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                        + "ÊúÄÂæåÊõ¥Êñ∞ÊôÇÈñìÔºö" + updateTime;
            } else {
                return "‚ö†Ô∏è Êü•ÁÑ°È°ßÂÆ¢ÔºÅ";
            }
        }

    //Â∑≤Êñ∞Â¢ûËá≥flow
    private String handleAddConfirm(UserSession session, String userId) {
    // Ë∫´ÂàÜË≠âÂè™ÂÖÅË®± 1ÂÄãÂ§ßÂØ´Â≠óÊØç + 9ÂÄãÊï∏Â≠ó
    

        Customer customer = new Customer();
        customer.setName(session.name);
        customer.setIdNumber(session.idNumber);
        customer.setBirthday(session.birthday);
        customer.setPhone(session.phone);
        customer.setRegion(session.region);
        customer.setStatus(session.status);
        customer.setAge(session.age);
        customer.setJob(session.job);
        customer.setProductsOwned(session.productsOwned);
        customer.setCreatedBy(userId);

        customerService.addCustomer(customer);
        try {
            String resultJson = openAiService.analyzeCustomerPotential(customer);
            JSONObject result = new JSONObject(resultJson);
            customer.setPotentialLevel(result.optString("Êàê‰∫§Ê©üÊúÉ", "Êú™Áü•"));
            customer.setAiComment(result.optString("Ë©ïÂÉπ", "ÁÑ°"));
            customer.setAiProductAdvice(result.optString("Âª∫Ë≠∞Áî¢ÂìÅ", "ÁÑ°"));
            customer.setAiFollowUp(result.optString("ÂæåÁ∫åÂª∫Ë≠∞", "ÁÑ°"));
            customer.setAiTags(result.optString("Ê®ôÁ±§", "ÁÑ°"));
            customerService.addCustomer(customer);
        } catch (Exception e) {
            customer.setPotentialLevel("Êú™Áü•");
            customer.setAiComment("AI ÂàÜÊûêÂ§±Êïó");
            customer.setAiProductAdvice("Ê≤íÊúâÂª∫Ë≠∞");
            customer.setAiFollowUp("Ê≤íÊúâÂª∫Ë≠∞");
            customer.setAiTags("Ê≤íÊúâÊ®ôÁ±§");
            customerService.addCustomer(customer);
        }
        String updateTime = customer.getUpdatedAt() != null
                ? customer.getUpdatedAt().toLocalDate().toString()
                : "ÁÑ°";
        return "‚úÖ È°ßÂÆ¢Â∑≤Êñ∞Â¢ûÔºö\n"
                + "üë§ ÂßìÂêçÔºö" + customer.getName() + "\n"
                + "üÜî Ë∫´ÂàÜË≠âÂ≠óËôüÔºö" + (customer.getIdNumber() == null ? "Êú™Â°´" : customer.getIdNumber()) + "\n"
                + "üéÇ Âá∫ÁîüÂπ¥ÊúàÊó•Ôºö" + (customer.getBirthday() == null ? "Êú™Â°´" : customer.getBirthday().toString()) + "\n"
                + "üìû ÈõªË©±Ôºö" + customer.getPhone() + "\n"
                + "üìç Âú∞ÂçÄÔºö" + customer.getRegion() + "\n"
                + "üéÇ Âπ¥ÈΩ°Ôºö" + (customer.getAge() == null ? "Êú™Â°´" : customer.getAge()) + "\n"
                + "üíº ËÅ∑Ê•≠Ôºö" + (customer.getJob() == null ? "Êú™Â°´" : customer.getJob()) + "\n"
                + "üõ°Ô∏è Â∑≤Ë≥ºÈö™Á®ÆÔºö" + (customer.getProductsOwned() == null ? "Êú™Â°´" : customer.getProductsOwned()) + "\n"
                + "üìù ÁãÄÊÖãÔºö" + customer.getStatus() + "\n"
                + "üåü Êàê‰∫§Ê©üÊúÉÔºö" + (customer.getPotentialLevel() != null ? customer.getPotentialLevel() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                + "ü§ñ Ë©ïÂÉπÔºö" + (customer.getAiComment() != null ? customer.getAiComment() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                + "üõí Âª∫Ë≠∞Áî¢ÂìÅÔºö" + (customer.getAiProductAdvice() != null ? customer.getAiProductAdvice() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                + "üìå ÂæåÁ∫åÂª∫Ë≠∞Ôºö" + (customer.getAiFollowUp() != null ? customer.getAiFollowUp() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                + "üè∑Ô∏è Ê®ôÁ±§Ôºö" + (customer.getAiTags() != null ? customer.getAiTags() : "AIÂ∞öÊú™ÂàÜÊûê") + "\n"
                + "ÊúÄÂæåÊõ¥Êñ∞ÊôÇÈñìÔºö" + updateTime;
    }


        //Êü•Ë©¢ÂÆ¢Êà∂ 
        //Â∑≤Êñ∞Â¢ûËá≥Command
         public ResponseEntity<String> handleQueryCustomer(String userId, String name, String replyToken) {
            List<Customer> list = customerService.findAllByNameAndCreatedBy(name, userId);
            StringBuilder sb = new StringBuilder();

            if (list == null || list.isEmpty()) {
                sb.append("‚ùå Êü•ÁÑ°ÂÆ¢Êà∂Ôºö").append(name);
            } else {
                sb.append("Êü•Ë©¢Âà∞ ").append(list.size()).append(" Á≠ÜÂêåÂêçÂÆ¢Êà∂Ôºö\n");
                for (int i = 0; i < list.size(); i++) {
                    Customer c = list.get(i);
                    sb.append("„ÄêÁ¨¨ ").append(i + 1).append(" Á≠Ü„Äë\n")
                    .append("üë§ ÂßìÂêçÔºö").append(c.getName() != null ? c.getName() : "Êú™Â°´").append("\n")
                    .append("üÜî Ë∫´ÂàÜË≠âÂ≠óËôüÔºö").append(c.getIdNumber()!= null ? c.getName() : "Êú™Â°´").append("\n")
                    .append("üéÇ Âá∫ÁîüÂπ¥ÊúàÊó•Ôºö").append(c.getBirthday() != null ? c.getBirthday().toString() : "Êú™Â°´").append("\n") 
                    .append("üìû ÈõªË©±Ôºö").append(c.getPhone() != null ? c.getPhone() : "Êú™Â°´").append("\n")
                    .append("üìç Âú∞ÂçÄÔºö").append(c.getRegion() != null ? c.getRegion() : "Êú™Â°´").append("\n")
                    .append("üî• Êàê‰∫§Ê©üÊúÉÔºö").append(c.getPotentialLevel() != null ? c.getPotentialLevel() : "AIÂ∞öÊú™ÂàÜÊûê").append("\n")
                    .append("üìù ÁãÄÊÖãÔºö").append(c.getStatus() != null ? c.getStatus() : "Êú™Â°´").append("\n")
                    .append("IDÔºö").append(c.getId())
                    .append("\n----------------\n");
                }
            }
            someMethod(replyToken, sb.toString());
            return ResponseEntity.ok("OK");
        }

            // // Ë£úÂÖÖÔºöË∫´ÂàÜË≠âÈÅÆËîΩ function
            // private String maskId(String idNumber) {
            //     if (idNumber == null || idNumber.length() != 10) return "Êú™Â°´";
            //     return idNumber.substring(0, 3) + "****" + idNumber.substring(7);
            // }


    
    //Êõ¥Êñ∞
    //Â∑≤Êñ∞Â¢ûËá≥flow
            public ResponseEntity<String> handleUpdateCustomer(String userId, String name, String replyToken) {
            List<Customer> list = customerService.findAllByNameAndCreatedBy(name, userId);
            if (list == null || list.isEmpty()) {
                 someMethod(replyToken, "‚ùå Êü•ÁÑ°È°ßÂÆ¢Ôºö" + name);
                return ResponseEntity.ok("OK");
            }
            UserSession session = new UserSession();
            session.step = UserSession.Step.CHOOSE_SAME_NAME_INDEX;
            session.sameNameList = list;
            sessionService.setUserSession(userId, session);

            StringBuilder sb = new StringBuilder();
            sb.append("Êü•Âà∞Â§öÁ≠ÜÂêåÂêçÈ°ßÂÆ¢ÔºåË´ãËº∏ÂÖ•Ê¨≤Êõ¥Êñ∞ÁöÑÁ∑®ËôüÔºö\n");
            for (int i = 0; i < list.size(); i++) {
                Customer c = list.get(i);
                sb.append((i + 1)).append(". ")
                .append(c.getName()).append(" / ")
                .append(c.getPhone() == null ? "Êú™Â°´" : c.getPhone())
                .append(" / ").append(c.getRegion() == null ? "Êú™Â°´" : c.getRegion())
                .append("\n");
            }
             someMethod(replyToken, sb.toString());
            return ResponseEntity.ok("OK");
        }
        //Âà™Èô§
        //Â∑≤Êñ∞Â¢ûËá≥flow
            public ResponseEntity<String> handleDeleteCustomer(String userId, String name, String replyToken) {
            List<Customer> list = customerService.findAllByNameAndCreatedBy(name, userId);
            if (list == null || list.isEmpty()) {
                 someMethod(replyToken, "‚ùå Êü•ÁÑ°È°ßÂÆ¢Ôºö" + name);
                return ResponseEntity.ok("OK");
            }
            UserSession session = new UserSession();
            session.step = UserSession.Step.DELETE_CHOOSE_INDEX;
            session.sameNameList = list;
            sessionService.setUserSession(userId, session);

            StringBuilder sb = new StringBuilder();
            sb.append("Êü•Âà∞Â§öÁ≠ÜÂêåÂêçÈ°ßÂÆ¢ÔºåË´ãËº∏ÂÖ•Ê¨≤Âà™Èô§ÁöÑÁ∑®ËôüÔºö\n");
            for (int i = 0; i < list.size(); i++) {
                Customer c = list.get(i);
                sb.append((i + 1)).append(". ")
                .append(c.getName()).append(" / ")
                .append(c.getPhone() == null ? "Êú™Â°´" : c.getPhone())
                .append(" / ").append(c.getRegion() == null ? "Êú™Â°´" : c.getRegion())
                .append("\n");
            }
            someMethod(replyToken, sb.toString());
            return ResponseEntity.ok("OK");
        }

            //ÂàóË°®
            //Â∑≤Êñ∞Â¢ûËá≥command
            public ResponseEntity<String> handleListAllCustomers(String userId, String replyToken) {
            List<Customer> allList = customerService.getAllCustomersByCreatedBy(userId); // Âè™ÊíàË©≤ user Âª∫Á´ãÁöÑ

            if (allList == null || allList.isEmpty()) {
                 someMethod(replyToken, "Â∞öÁÑ°È°ßÂÆ¢Ë≥áÊñô„ÄÇ");
                return ResponseEntity.ok("OK");
            }

            StringBuilder sb = new StringBuilder();
            sb.append("„ÄêÊâÄÊúâÂÆ¢Êà∂ÂàóË°®„Äë\n");
            int maxDisplay = 20; // ÊúÄÂ§öÈ°ØÁ§∫20Á≠ÜÔºàÂèØË™øÊï¥Ôºâ
            for (int i = 0; i < allList.size() && i < maxDisplay; i++) {
                Customer c = allList.get(i);
                sb.append("üë§ ").append(c.getName() != null ? c.getName() : "Êú™Â°´")
                .append("\nüìû ").append(c.getPhone() != null ? c.getPhone() : "Êú™Â°´")
                .append("\nüìç ").append(c.getRegion() != null ? c.getRegion() : "Êú™Â°´")
                .append("\nüî• ").append(c.getPotentialLevel() != null ? c.getPotentialLevel() : "AIÂ∞öÊú™ÂàÜÊûê")
                .append("\n----------------\n");
            }

            if (allList.size() > maxDisplay) {
                sb.append("......(ÂÉÖÈ°ØÁ§∫Ââç ").append(maxDisplay).append(" Á≠Ü)\n");
            }

             someMethod(replyToken, sb.toString());
            return ResponseEntity.ok("OK");
        }

        //Â∑≤Êñ∞Â¢ûËá≥command
            public ResponseEntity<String> handleTopCustomers(String createdBy, int limit, String replyToken) {
                List<Customer> allList = customerService.getAllCustomersByCreatedBy(createdBy);

                if (allList == null || allList.isEmpty()) {
                    someMethod(replyToken, "Â∞öÁÑ°ÂÆ¢Êà∂Ë≥áÊñô„ÄÇ");
                    return ResponseEntity.ok("OK");
                }

              

                // ÈÅéÊøæÊúâÊúâÊïàÂàÜÊï∏ÔºàÂê´„ÄåÂàÜ„ÄçÂ≠óÁöÑÊï∏Â≠óÔºâ
                List<Customer> validList = allList.stream()
                        .filter(c -> c.getPotentialLevel() != null && isNumeric(c.getPotentialLevel()))
                        .collect(Collectors.toList());


                if (validList.isEmpty()) {
                    someMethod(replyToken, "ÁõÆÂâçÊ≤íÊúâÂàÜÊûêÂá∫Êàê‰∫§ÂàÜÊï∏ÁöÑÈ°ßÂÆ¢Ë≥áÊñô„ÄÇ");
                    return ResponseEntity.ok("OK");
                }

                // ‰æùÂàÜÊï∏ÊéíÂ∫èÔºàÂ∞á„ÄåÂàÜ„ÄçÂ≠óÂéªÊéâÔºâ
                validList.sort((c1, c2) -> 
                    Integer.compare(
                        Integer.parseInt(c2.getPotentialLevel().replace("ÂàÜ", "").trim()),
                        Integer.parseInt(c1.getPotentialLevel().replace("ÂàÜ", "").trim())
                    )
                );

                StringBuilder sb = new StringBuilder();
                sb.append("„ÄêÊàê‰∫§ÁéáÊúÄÈ´òÂâç ").append(limit).append(" ‰ΩçÈ°ßÂÆ¢„Äë\n");
                for (int i = 0; i < validList.size() && i < limit; i++) {
                    Customer c = validList.get(i);
                    sb.append("NO.").append(i + 1)
                        .append("ÔΩúüë§").append(c.getName() != null ? c.getName() : "Êú™Â°´")
                        .append("\nüìû").append(c.getPhone() != null ? c.getPhone() : "Êú™Â°´")
                        .append("\nüî•Êàê‰∫§ÂàÜÊï∏Ôºö").append(c.getPotentialLevel())
                        .append(c.getAiComment() != null ? "\nü§ñ" + c.getAiComment() : "")
                        .append("\n----------------\n");
                }

                someMethod(replyToken, sb.toString());
                return ResponseEntity.ok("OK");
            }

            //Â∑≤Êñ∞Â¢ûËá≥command
            private boolean isNumeric(String str) {
                if (str == null || str.trim().isEmpty()) return false;
                str = str.trim().replace("ÂàÜ", "");
                try {
                    Integer.parseInt(str);
                    return true;
                } catch (NumberFormatException e) {
                    return false;
                }
            }


        public void someMethod(String replyToken, String replyText){
            lineMessageUtil.sendLineReply(replyToken, replyText);
        }
    
}
